 <%- include('layouts/header.ejs') %>
<body>
   <div class="container">

    <div class="main">
        <div class="icon_sec">
           <div class="profileuser">

               <i class="fa-solid fa-circle-user" onclick="onlick()"></i>  
           </div>
          
        </div>
        <div class="profile_div" id="profile_div">
            <div class="userProfile_name">
                <i class="fa-solid fa-circle-user" ></i>  
                <h5>user</h5>
               
            </div>
            <button>logOut</button>
             
        </div>

   <div class="user_sec">
    <div class="chat_head">
        <h2>chats</h2>
        <div class="search_icon">
            <i class="fa-solid fa-magnifying-glass"></i>
            <input type="search" class="userSearch">
        </div>
        <div class="user_info">
            <input type="hidden">
            <!-- <span id="userid"></span> -->
            <input id="userid" type="hidden" value="<%= currentUser._id %>" />
            
            <% if (otherUsers.length > 0) { %>
                <% otherUsers.forEach(user => { %>
                    
                    <li data_username='<%= user.username %>' data_userid="<%= user._id %>" class="user_list">
                       <i class="fa-solid fa-circle-user"></i>  <span class="username"><%= user.username %></span>
                    
                       <% if (user.is_online == 1) { %>
                        <sup class="online_status_dots" id="<%= user._id %>-status">online</sup>
                  <% }else{ %>
                   <sup class="offline_status" id="<%= user._id %>-status">offline</sup>
                  <% } %>
                       

                      
                    </li>
                <% }) %> 
            <% } %>
        </div>
        
    </div>
   </div>
   <div class="userPage" id="userPage">
    <h2>chatapp for windows</h2>
    <p>send and receive messages without keeping your phone online.<br>
         use chatapp on up to 4 linked devices and 1 phone at the sam time</p>

   </div>
   <div class="chat_sec" id="chat_sec">
     <div class="user_name_page">
        <div class="user_profile_name">
            <i class="fa-solid fa-circle-user"></i>
           <h4 id="userName"></h4>
           <input type="hidden" name="" id="id">
           <!-- <h4 id="id"></h4> -->
        </div>    
     </div>
     <div class="chatting_page" id="chatting_page">
     <div class="messages" id="chatContainer">
      
    
         
     </div>.
     
    
     <!-- <from  class="sent_msg_sec" id="formChat" >
        <input type="text" class="typeInput" placeholder="Type a message" id="typeInput" name="message" required>
       <input  class="send_btn" type="submit">
            <i class="fa-solid fa-paper-plane"></i>
        </input>
       
     </from> -->
     <form action="/chatUser" class="sent_msg_sec" id="formChat" method="post">
        <input type="text" class="typeInput" placeholder="Type a message" id="typeInput" name="message" >
        <input  class="send_btn" type="submit">
           
         </input>
     </form>
   </div>
</div>
   </div>
</div>

<!-- Button trigger modal -->

  
  <!-- Modal -->
  <!-- <div class="modal fade" id=" " tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">delete chat</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <form id="deleteChatForm">
        <div class="modal-body">
            <input type="text" name="id" id="delete_message_id">
           <p>Are you sure you want to delete below Message ?</p>
           <p><b id = "delete_message"></b></p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary">Save changes</button>
        </div>
    </form>
      </div>
    </div>
  </div> -->
<script src="/socket.io/socket.io.js"></script>
<!-- <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script> -->
<!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script> -->
<script>     //locals.logedin id

   
    var sender_id = "<%= currentUser._id %>"
    var receiver_id;
    console.log(receiver_id);
    
    
    console.log("fdfdfdf",sender_id)
  
   
   
    var socket  = io("/chat",{
        auth:{
            token:"<%= currentUser._id %>"
        }
    })
    const send = document.getElementById("send")
    
   

    function onlick(){
        let profile_div = document.getElementById("profile_div")
        profile_div.style.display= "block"
    }
    // send.addEventListener("click",function(){
    //     let txt = document.getElementById("typeInput").value;
    //     socket.emit("message",txt)
    //     socket.emit("user._id",12345678)
    // })


    const chat = document.getElementById("chat_sec")

    document.querySelectorAll(".user_list").forEach(function(element) {
            element.addEventListener("click", function() {
                const username = element.getAttribute("data_username");
                const userId = element.getAttribute("data_userid");
                chatboard(username, userId);
            });
        });

    function chatboard(username,userId){
        const chat = document.getElementById("chat_sec")
        const userPage = document.getElementById("userPage")
        const chatting_page = document.getElementById("chatting_page")
        userPage.style.display="none"
        chat.style.display = "block";
        chatting_page.style.display = "block";
        document.getElementById('userName').innerText = username;
        document.getElementById('id').innerText = userId;
        receiver_id = userId
        console.log("reaciver id..........",receiver_id); 

        socket.emit("existChat",{sender_id:sender_id,receiver_id:receiver_id})

       
        
    }
    console.log("dcekcjnejdcnjuencjun",receiver_id);
    
    socket.on('getOnlineUser', function(data) {
    const statusElement = document.getElementById(data.user_id + '-status');
    if (statusElement) {
        statusElement.classList.add('online_status_dots');
        statusElement.classList.remove('offline_status');
        statusElement.textContent = 'online';
    }
    });

// When user goes offline
    socket.on('getofflineUser', function(data) {
        const statusElement = document.getElementById(data.user_id + '-status');
        if (statusElement) {
            statusElement.classList.add('offline_status');
            statusElement.classList.remove('online_status_dots');
            statusElement.textContent = 'offline';
        }
    });

    document.getElementById("formChat").addEventListener("submit", function(e) {
    e.preventDefault();

    var message = document.getElementById("typeInput").value;

    fetch('/chatUser', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            sender_id: sender_id,
            receiver_id: receiver_id,
            message: message
        })
    })
    .then(response => response.json())
    .then(data => {
        console.log("Server response:", data);
        if (data.success) {
            document.getElementById("typeInput").value = "";
            let chat = data.data.message;
            let html = `
               
                    
             <div class="message my_msg">
            

                <div class="text">`+chat+`</div>
     
        </div>
                  
               
            `;
            document.querySelector(".messages").innerHTML += html;
           
            socket.emit("newChat", data.data);
        } else {
            alert(data.msg);
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
});

socket.on('loadNewChat',function(data){
    if(sender_id == data.receiver_id && receiver_id == data.sender_id){
        let html= `
     <div class="message other_msg">
           

                <div class="text">`+data.message+`</div>
                    
           
        </div>
    `;
     document.querySelector(".messages").innerHTML += html;
    }
    

})

socket.on("loadChat", function (data) {
    document.querySelector(".messages").innerHTML = '';
    let chats = data.chats;

    console.log("Chats data:", chats);

    let html = '';

    chats.forEach(function (chat) {
        let addClass = (chat.sender_id == sender_id) ? 'message my_msg' : 'message other_msg';

        html += `
            <div class="hover ${addClass}">
                <div class="text">${chat.message}
                   
                    </div>
            </div>
            
           
        `;
    });

    console.log("Generated HTML:", html); 

    document.querySelector(".messages").innerHTML = html;
    scrollChat();
});

function scrollChat (){
    var chatContainer = document.getElementById('chatContainer');
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

   

</script>
</body>
</html>